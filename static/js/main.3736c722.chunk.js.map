{"version":3,"sources":["assests/loader.gif","componets/SeriesList/index.js","componets/Loader/index.js","componets/intro/index.js","container/Series/index.js","container/SingleSeries/index.js","componets/Main/index.js","componets/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","SeriesListItems","series","to","show","id","name","SeriesList","props","className","list","map","key","LoaderImag","margin","Loader","style","alt","src","loaderSrc","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","setState","target","value","fetch","then","res","json","this","type","onChange","length","trim","Component","SingleSeries","match","params","premiered","rating","average","_embedded","episodes","image","medium","Main","exact","path","component","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3736c722.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.ad1152b5.gif\";","import React from 'react';\r\nimport './index.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SeriesListItems = ({ series }) =>(\r\n    <li >\r\n    \r\n    <Link to={`/series/${series.show.id}`}>\r\n    {series.show.name}\r\n    </Link>\r\n    {/* <a href={series.show.url}> {series.show.name}</a> */}\r\n    </li>\r\n\r\n)\r\nconst SeriesList = (props) =>{\r\n   return(\r\n       <div>\r\n           <ul className=\"series-list\">\r\n                {props.list.map(series =>(\r\n                    <SeriesListItems series ={series} key={series.show.id} />\r\n                ))}\r\n           </ul>\r\n       </div>\r\n   ) \r\n}\r\n\r\n\r\nexport default SeriesList;","import React from 'react';\r\nimport loaderSrc from '../../assests/loader.gif';\r\n\r\nconst LoaderImag = {\r\n    margin: '20px'\r\n}\r\n\r\nconst Loader =(props)=>(\r\n<div> \r\n<img style={LoaderImag}\r\nalt=\"loader icon\"\r\nsrc= {loaderSrc} />\r\n</div>\r\n);\r\n\r\nexport default Loader;","import React from 'react';\r\n\r\nconst Intro =(props)=>(\r\n    <p>\r\n   {props.message}\r\n        </p>\r\n);\r\n\r\nexport default Intro;","/* eslint-disable no-unused-vars */\r\n// eslint-disable-next-line\r\nimport React, { Component } from 'react';\r\nimport SeriesList from '../../componets/SeriesList';\r\nimport Loader from '../../componets/Loader';\r\nimport Intro from '../../componets/intro'\r\n\r\n\r\nclass Series extends Component {\r\n    state = {\r\n        series: [],\r\n        seriesName :'',\r\n        isFetching: false\r\n\r\n      }\r\n    \r\n\r\n    onSeriesInputChange = e =>{ \r\n      \r\n      this.setState({seriesName: e.target.value, isFetching: true})\r\n        \r\n      fetch( `http://api.tvmaze.com/search/shows?q=${e.target.value}`)\r\n        .then(res =>res.json())\r\n        .then(json =>this.setState({series : json, isFetching: false}))\r\n      //console.log(e.target.value);\r\n      \r\n    }\r\n\r\n    render() {\r\n      const { series, seriesName, isFetching } = this.state;\r\n        return (\r\n            <div> \r\n                     <Intro message=\"Here you can find all of your most loved series\"/>\r\n\r\n              <div>\r\n                <input \r\n                value= {seriesName}\r\n                type=\"text\" \r\n                onChange={this.onSeriesInputChange} />\r\n              </div>\r\n              {\r\n                !isFetching && series.length === 0 && seriesName.trim()===''\r\n                &&\r\n                <p>Plaese enter series name into the Input</p>\r\n                }\r\n                {\r\n                  !isFetching && series.length === 0 && seriesName.trim() !== ''\r\n                  &&\r\n                  <p>No Tv series has been found with this name</p>\r\n                }\r\n                {\r\n                  isFetching \r\n                  &&\r\n                  <Loader />\r\n                }\r\n                {\r\n                  !isFetching && <SeriesList list={this.state.series}/>\r\n                }\r\n\r\n              \r\n              </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Series;\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport Loader from '../../componets/Loader'\r\n\r\n\r\nclass SingleSeries extends Component{\r\nstate ={\r\n    show: null\r\n}\r\n\r\ncomponentDidMount(){\r\n    const  { id } = this.props.match.params;\r\n\r\n    fetch( `http://api.tvmaze.com/shows/${id}?embed=episodes`)\r\n    .then(res =>res.json())\r\n    .then(json =>this.setState({ show : json }))\r\n \r\n}\r\n    render(){\r\n\r\n        const { show } = this.state;\r\n\r\n        \r\n            return(\r\n                \r\n                <div>\r\n                    {show === null && <Loader />} \r\n                    {\r\n                        show !== null\r\n                        &&\r\n                        <div>\r\n                        <p>{show.name}</p> \r\n                        <p>Premiered - {show.premiered}</p> \r\n                        <p>Rating: {show.rating.average}</p> \r\n                        <p> Episodes: {show._embedded.episodes.length}</p> \r\n                        <p>\r\n                        <img alt=\"Show\" src={show.image.medium}/>\r\n                        </p>  \r\n                        </div>\r\n                       \r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n\r\n        \r\n    \r\n}\r\n\r\nexport default SingleSeries;","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Series from '../../container/Series';\r\nimport SingleSeries from '../../container/SingleSeries';\r\n\r\n\r\nconst Main = props =>(\r\n    <Switch>\r\n        <Route exact path=\"/\" component ={Series}/>\r\n        <Route  path=\"/series/:id\" component ={SingleSeries}/>\r\n    </Switch>\r\n\r\n\r\n) \r\n\r\nexport default Main; ","import React, { Component } from 'react';\nimport Main from '../Main'\nimport './App.css';\n \n\nclass App extends Component {\n  \n  render() {\n    return ( \n    <div className=\"App\"> \n      <header className=\"App-header\">\n        <h1>TV SERIES</h1>\n      </header>\n      \n       <Main />\n    </div>\n  );}\n}  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './componets/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n//const greeting = React.createElement('h1', {}, 'hello world');\n\nReactDOM.render(\n <BrowserRouter><App /></BrowserRouter>,\n document.getElementById('root')\n );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}