{"version":3,"sources":["assests/loader.gif","componets/SeriesList/index.js","componets/Loader/index.js","componets/intro/index.js","container/Series/index.js","container/SingleSeries/index.js","componets/Main/index.js","componets/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","SeriesListItems","series","to","show","id","name","SeriesList","props","className","list","map","key","LoaderImag","margin","Loader","style","alt","src","loaderSrc","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","setState","target","value","fetch","then","res","json","this","type","onChange","length","trim","Component","SingleSeries","match","params","console","log","toUpperCase","premiered","rating","average","_embedded","episodes","image","medium","Main","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,mPCIrCC,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACpB,4BAEA,kBAAC,IAAD,CAAMC,GAAE,kBAAaD,EAAOE,KAAKC,KAChCH,EAAOE,KAAKE,QAkBFC,EAZI,SAACC,GACjB,OACI,6BACI,wBAAIC,UAAU,eACRD,EAAME,KAAKC,KAAI,SAAAT,GAAM,OAAI,kBAAC,EAAD,CAAiBA,OAASA,EAAQU,IAAKV,EAAOE,KAAKC,W,iBCfvFQ,EAAa,CACfC,OAAQ,QAWGC,EARD,SAACP,GAAD,OACd,6BACA,yBAAKQ,MAAOH,EACZI,IAAI,cACJC,IAAMC,QCHSC,EAND,SAACZ,GAAD,OACZ,2BACGA,EAAMa,UC4DIC,E,2MAvDbC,MAAQ,CACNrB,OAAQ,GACRsB,WAAY,GACZC,YAAY,G,EAKdC,oBAAsB,SAAAC,GAEpB,EAAKC,SAAS,CAAEJ,WAAYG,EAAEE,OAAOC,MAAOL,YAAY,IAExDM,MAAM,wCAAD,OAAyCJ,EAAEE,OAAOC,QACpDE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAI,EAAKN,SAAS,CAAE1B,OAAQgC,EAAMT,YAAY,Q,wEAKlD,IAAD,EACoCU,KAAKZ,MAAxCrB,EADD,EACCA,OAAQsB,EADT,EACSA,WAAYC,EADrB,EACqBA,WAC5B,OACE,6BACE,kBAAC,EAAD,CAAOJ,QAAQ,oDAEf,6BACE,2BAAOS,MAAON,EACZY,KAAK,OACLC,SAAUF,KAAKT,wBAGhBD,GAAgC,IAAlBvB,EAAOoC,QAAsC,KAAtBd,EAAWe,QAEjD,uEAGCd,GAAgC,IAAlBvB,EAAOoC,QAAsC,KAAtBd,EAAWe,QAEjD,yEAGAd,GAEA,kBAAC,EAAD,OAGCA,GAAc,kBAAC,EAAD,CAAYf,KAAMyB,KAAKZ,MAAMrB,c,GA/CjCsC,aCwCNC,E,2MA1CflB,MAAO,CACHnB,KAAM,M,mFAGU,IAAD,OACNC,EAAO8B,KAAK3B,MAAMkC,MAAMC,OAAxBtC,GAET0B,MAAM,+BAAD,OAAiC1B,EAAjC,oBACJ2B,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAE,GAAI,OAAG,EAAKN,SAAS,CAAExB,KAAO8B,S,+BAE/B,IAEO9B,EAAS+B,KAAKZ,MAAdnB,KAGR,OADAwC,QAAQC,IAAIzC,GAGJ,6BACc,OAATA,GAAiB,kBAAC,EAAD,MAEL,OAATA,GAEA,6BACA,2BAAIA,EAAKE,KAAKwC,eACd,0CAAgB1C,EAAK2C,WACrB,sCAAY3C,EAAK4C,OAAOC,SACxB,yCAAe7C,EAAK8C,UAAUC,SAASb,QACvC,2BACmB,OAAflC,EAAKgD,OAET,yBAAKnC,IAAI,OAAOC,IAAKd,EAAKgD,MAAMC,gB,GAhC7Bb,aCUZc,EATF,SAAA9C,GAAK,OACd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO+C,OAAK,EAACC,KAAK,IAAIC,UAAYnC,IAClC,kBAAC,IAAD,CAAQkC,KAAK,cAAcC,UAAYhB,MCUhCiB,G,uLAXX,OACE,yBAAKjD,UAAU,OACb,4BAAQA,UAAU,cAChB,0CAEF,kBAAC,EAAD,W,GARU+B,cCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCPNqB,IAASC,OACP,kBAAC,IAAD,KAAe,kBAAC,EAAD,OACfC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.b7e5324a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.ad1152b5.gif\";","import React from 'react';\r\nimport './index.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SeriesListItems = ({ series }) =>(\r\n    <li >\r\n    \r\n    <Link to={`/series/${series.show.id}`}>\r\n    {series.show.name}\r\n    </Link>\r\n    {/* <a href={series.show.url}> {series.show.name}</a> */}\r\n    </li>\r\n\r\n)\r\nconst SeriesList = (props) =>{\r\n   return(\r\n       <div>\r\n           <ul className=\"series-list\">\r\n                {props.list.map(series =>(<SeriesListItems series ={series} key={series.show.id} />\r\n                ))}\r\n           </ul>\r\n       </div>\r\n   ) \r\n}\r\n\r\n\r\nexport default SeriesList;","import React from 'react';\r\nimport loaderSrc from '../../assests/loader.gif';\r\n\r\nconst LoaderImag = {\r\n    margin: '20px'\r\n}\r\n\r\nconst Loader =(props)=>(\r\n<div> \r\n<img style={LoaderImag}\r\nalt=\"loader icon\"\r\nsrc= {loaderSrc} />\r\n</div>\r\n);\r\n\r\nexport default Loader;","import React from 'react';\r\n\r\nconst Intro = (props) => (\r\n  <p>\r\n    {props.message}\r\n  </p>\r\n);\r\n\r\nexport default Intro;","/* eslint-disable no-unused-vars */\r\n// eslint-disable-next-line \r\nimport React, { Component } from 'react';\r\nimport SeriesList from '../../componets/SeriesList';\r\nimport Loader from '../../componets/Loader';\r\nimport Intro from '../../componets/intro'\r\n\r\n\r\nclass Series extends Component {\r\n  state = {\r\n    series: [],\r\n    seriesName: '',\r\n    isFetching: false\r\n\r\n  }\r\n\r\n\r\n  onSeriesInputChange = e => {\r\n\r\n    this.setState({ seriesName: e.target.value, isFetching: true })\r\n\r\n    fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\r\n      .then(res => res.json())\r\n      .then(json => this.setState({ series: json, isFetching: false }))\r\n    //console.log(e.target.value);\r\n\r\n  }\r\n\r\n  render() {\r\n    const { series, seriesName, isFetching } = this.state;\r\n    return (\r\n      <div>\r\n        <Intro message=\"Here you can find all of your most loved series\" />\r\n\r\n        <div>\r\n          <input value={seriesName}\r\n            type=\"text\"\r\n            onChange={this.onSeriesInputChange} />\r\n        </div>\r\n        {\r\n          !isFetching && series.length === 0 && seriesName.trim() === ''\r\n          &&\r\n          <p>Plaese enter series name into the Input</p>\r\n        }\r\n        {\r\n          !isFetching && series.length === 0 && seriesName.trim() !== ''\r\n          &&\r\n          <p>No Tv series has been found with this name</p>\r\n        }\r\n        {\r\n          isFetching\r\n          &&\r\n          <Loader />\r\n        }\r\n        {\r\n          !isFetching && <SeriesList list={this.state.series} />\r\n        }\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Series;\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport Loader from '../../componets/Loader'\r\n\r\n\r\nclass SingleSeries extends Component{\r\nstate ={\r\n    show: null\r\n}\r\n \r\ncomponentDidMount(){\r\n    const  { id } = this.props.match.params;\r\n\r\n    fetch( `http://api.tvmaze.com/shows/${id}?embed=episodes`)\r\n    .then(res =>res.json())\r\n    .then(json =>this.setState({ show : json }))\r\n}\r\nrender(){\r\n\r\n        const { show } = this.state;\r\n\r\n        console.log(show);\r\n        return(\r\n                \r\n                <div>\r\n                    {show === null && <Loader />} \r\n                    {\r\n                        show !== null\r\n                        &&\r\n                        <div>\r\n                        <p>{show.name.toUpperCase()}</p> \r\n                        <p>Premiered - {show.premiered}</p> \r\n                        <p>Rating: {show.rating.average}</p> \r\n                        <p> Episodes: {show._embedded.episodes.length}</p> \r\n                        <p>{\r\n                            show.image !== null\r\n                            &&\r\n                        <img alt=\"Show\" src={show.image.medium}/>\r\n                        }\r\n                        </p>  \r\n                        </div>\r\n                       \r\n                    }\r\n                </div>\r\n            )\r\n        }  \r\n}\r\n\r\nexport default SingleSeries;","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Series from '../../container/Series';\r\nimport SingleSeries from '../../container/SingleSeries';\r\n\r\n\r\nconst Main = props =>(\r\n    <Switch>\r\n        <Route exact path=\"/\" component ={Series}/>\r\n        <Route  path=\"/series/:id\" component ={SingleSeries}/>\r\n    </Switch>\r\n\r\n\r\n) \r\n\r\nexport default Main; ","import React, { Component } from 'react';\nimport Main from '../Main'\nimport './App.css';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>TV SERIES</h1>\n        </header>\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './componets/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n//const greeting = React.createElement('h1', {}, 'hello world');\n\nReactDOM.render(\n  <BrowserRouter><App /></BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}